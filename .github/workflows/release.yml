# .github/workflows/publish-to-pypi.yml

name: Publish Python Package with UV

on:
  workflow_dispatch:  # Manual trigger
  # push:
  #   branches:
  #     - master

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Test against the minimum supported Python and a recent one
        python-version: ['3.10', '3.12', '3.13'] # Based on your requires-python = ">=3.10"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/uv.lock') }} # Add uv.lock if you use it
          restore-keys: |
            ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}-
            ${{ runner.os }}-uv-${{ matrix.python-version }}-

      - name: Install dependencies (including dev for tests)
        run: |
          # Installs project in editable mode with 'dev' extras.
          # Adjust if your 'dev' group isn't an extra or you manage it differently.
          # If you adopt [project.optional-dependencies.dev]:
          # uv pip install --system -e .[dev]
          # If you keep [dependency-groups] and uv understands it for install:
          uv pip install --system -e . --extra dev # syntax might vary based on uv's interpretation

      - name: Run Pytest
        run: |
          # Your pytest.ini_options sets pythonpath = ["."], so this should work
          # Or use uv run if pytest is a direct dependency or script
          uv run pytest # Or just `pytest` if the venv is active and pytest is on PATH
          # Or: pytest tests/ # If your tests are in a 'tests' directory


  build-and-publish:
    name: Build and Publish to PyPI
    runs-on: ubuntu-latest
    # Only run this job if tests pass AND it's a tag push
    needs: test # Ensures tests are run first
    if: success() && startsWith(github.ref, 'refs/tags/')

    permissions:
      contents: read
      id-token: write # For OIDC (recommended future enhancement)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # A single, recent Python version for building

      - name: Install uv
        uses: astral-sh/setup-uv@v1

      # Cache uv for the build job as well (can share cache configuration if key is generic enough)
      - name: Cache uv (for build job)
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-build-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-build-${{ hashFiles('**/pyproject.toml') }}-
            ${{ runner.os }}-uv-build-

      - name: Install Twine for publishing
        run: uv pip install --system twine

      - name: Build package with uv
        run: |
          # uv build will use the build backend specified in your pyproject.toml (setuptools)
          uv build --sdist --wheel --out-dir dist/ .
          # Optional: add --frozen-lockfile if you commit and use uv.lock for build dependencies

      - name: Verify built distributions
        run: |
          ls -l dist/
          twine check dist/*

      - name: Publish package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*

      # --- Optional: Publish to TestPyPI first (for testing the publish step itself) ---
      # - name: Publish package to TestPyPI
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }} # Needs a separate secret
      #   run: twine upload --repository testpypi dist/*